import telebot
import config
import keyboard
import random
import stickers
# import sqlite3

from sqlite import SQLite

bot = telebot.TeleBot(config.TOKEN)
# bot = telebot.TeleBot('1448780946:AAHZj31LiknjQS1lAcq5gsh8tZ8ZWg8PY0Q')
from telebot import types

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
# db = SQLite('data.db')
# db = sqlite3.connect("data.db")
# sql = db.cursor()


# def add_data(text, user_id, TYPE1, TYPE2, subcategory): # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
#  global sql, db
#  sql.execute(f"INSERT INTO data_table VALUES(?,?,?,?,?)", (text, user_id, TYPE1, TYPE2, subcategory))
#  db.commit()

N_allRun = False
L_allRun = False
Note = False
find = False
TYPE1 = "Unknown"
TYPE2 = "Unknown"
text = "Unknown"
name = "Unknown"
isRunning = False
subcategoryRun = False
changeRun = False

mainKeyboard = keyboard.mainKeyboard
rightKeyboard = keyboard.rightKeyboard
noteCategoryKeyboard = keyboard.noteCategoryKeyboard
noteKeyboard = keyboard.noteKeyboard
"""
videoCategoryKeyboard = keyboard.videoCategoryKeyboard
articleCategoryKeyboard = keyboard.videoCategoryKeyboard
documentCategoryKeyboard = keyboard.documentCategoryKeyboard
spreadsheetsCategoryKeyboard = keyboard.documentCategoryKeyboard
cloudDriveCategoryKeyboard = keyboard.cloudDriveCategoryKeyboard
githubCategoryKeyboard = keyboard.githubCategoryKeyboard
websiteCategoryKeyboard = keyboard.websiteCategoryKeyboard
"""
ChangeTYPE2Keyboard = keyboard.ChangeTYPE2Keyboard
rightKeyboard_without_subcategory = keyboard.rightKeyboard_without_subcategory


@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    texxxt = 'https://www.youtube.com/watch?v=YvZqIoAwUh8&ab_channel=thebootlegboy2'
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–º–µ—Ç–æ–∫. "
                     "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=mainKeyboard)
    bot.send_message(message.chat.id, f"<a href='{texxxt}'>–î–æ—Ä–æ–≤</a>", parse_mode='html')


@bot.message_handler(commands=['help'])
def help_mes(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n"
                                      "/help - –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                                      "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å\n"
                                      "/reset - –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –±–æ—Ç –∑–∞–≤–∏—Å, —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤\n"
                                      "/hard_clear - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î\n"
                                      "/clear_links - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –ë–î\n"
                                      "/clear_notes - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –ë–î\n"
                                      "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –µ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,"
                                      "–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, "
                                      "–∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "
                                      "–æ—Ç–≤–µ—Ç–∞ '–æ–∫–µ–π', —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –Ω–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.")


@bot.message_handler(commands=['reset'])
def help_mes(message):
    global N_allRun
    global L_allRun
    global Note
    global find
    global isRunning
    global subcategoryRun
    global changeRun
    N_allRun = False
    L_allRun = False
    Note = False
    find = False
    isRunning = False
    subcategoryRun = False
    changeRun = False

@bot.message_handler(commands=['hard_clear'])
def clear(message):
    db = SQLite('data.db')
    db.clear(message.chat.id)

    bot.send_message(message.chat.id, "–û—Ç –≤–∞—Å –≤ –ë–î –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ —Å–ª–µ–¥–∞")
    db.close()

@bot.message_handler(commands=['clear_links'])
def clear1(message):
    db = SQLite('data.db')
    db.clear1(message.chat.id, 1)
    bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    db.close()


@bot.message_handler(commands=['clear_notes'])
def clear2(message):
    db = SQLite('data.db')
    db.clear1(message.chat.id, 2)
    bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    db.close()


@bot.message_handler(commands=['help'])
def welcome(message):
    # keyboard
    bot.send_message(message.chat.id, "")


@bot.message_handler(content_types=['text'])
def send_text(message):
    global find
    global TYPE1
    global TYPE2
    global isRunning
    global text

    if isRunning == True:  # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
        bot.send_message(message.chat.id, '–ú—ã –µ—â–µ —Å –ø—Ä–æ—à–ª—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, –∞ —Ç—ã —Å –Ω–æ–≤—ã–º –ª–µ–∑–µ—à—å')
        return
    db = SQLite('data.db')
    text = message.text.lower()
    chat_id = message.chat.id
    # if db.data_exists(text):
    # bot.send_message(message.chat.id, '–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

    if "https" in text or "http" in text or "www" in text:
        bot.send_message(message.chat.id, '—ç—Ç–æ —Å—Å—ã–ª–∫–∞, –Ω–∞—Ñ–∏–≥')
        if db.link_exists(text, 1):
            bot.send_message(message.chat.id, "–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å, —Ç–µ–∫—É—â–∞—è –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é")
        TYPE1 = "Link"
        isRunning = True
        find = False
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        if not find:
            if "youtube.com" in text and not "watch" in text:
                bot.send_message(message.chat.id, '–≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ youtube, –∑–∞—á–µ–º –≤–∞–º –µ–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å? –ê–≤—Ç–æ—Ä?')
            for key in keyboard.videoList:
                if find:
                    break  # —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –Ω–µ –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–µ–ª–∞–µ–º break
                if key in text:
                    TYPE2 = "Video"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –≤–∏–¥–µ–æ', reply_markup=rightKeyboard)
                    find = True
                    isRunning = True

        if not find:
            for key in keyboard.articleList:
                if find:
                    break
                if key in text:
                    TYPE2 = "Article"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Å—Ç–∞—Ç—å—è', reply_markup=rightKeyboard)
                    find = True
                    isRunning = True

        if not find:
            for key in keyboard.documentList:
                if find:
                    break
                if key in text:
                    TYPE2 = "Document"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç',
                                     reply_markup=rightKeyboard)
                    find = True
                    isRunning = True

        if not find:
            for key in keyboard.spreadsheetList:
                if find:
                    break
                if key in text:
                    TYPE2 = "Spreadsheet"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞',
                                     reply_markup=rightKeyboard)
                    find = True
                    isRunning = True

        if not find:
            for key in keyboard.cloudDriveList:
                if find:
                    break
                if key in text:
                    TYPE2 = "CloudDrive"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
                                     reply_markup=rightKeyboard)
                    find = True
                    isRunning = True

        if not find:
            for key in keyboard.githubList:
                if find:
                    break
                if key in text:
                    TYPE2 = "github"
                    bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ github',
                                     reply_markup=rightKeyboard)
                    find = True
                    isRunning = True
        # –ï—Å–ª–∏ –Ω–∏ —Å —á–µ–º –Ω–µ —Å–æ–≤–ø–∞–ª–æ - —Ç–æ —ç—Ç–æ —Å–∞–π—Ç
        if not find:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Å–∞–π—Ç',
                             reply_markup=rightKeyboard)
            TYPE2 = "Website"
            find = True
            isRunning = True
    elif message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        bot.send_message(message.chat.id, str(random.randint(0, 100)))
    elif message.text == "üåê–°—Å—ã–ª–∫–∏":
        bot.send_message(message.chat.id, 'üåê–°—Å—ã–ª–∫–∏', reply_markup=keyboard.linkAskKeyboard)
    elif message.text == "üìù–ó–∞–º–µ—Ç–∫–∏":
        bot.send_message(message.chat.id, 'üìù–ó–∞–º–µ—Ç–∫–∏', reply_markup=keyboard.noteAskKeyboard)

        # elif message.text == "üóí–ó–∞–¥–∞—á–∏":
        # bot.send_message(message.chat.id, '–¢–∏–ø–æ –∑–∞–¥–∞—á–∏')
        # bot.register_next_step_handler(message, ToDo)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
    elif text in keyboard.jiveList:
        msg = random.choice(stickers.jiveBelarus)
        bot.send_sticker(message.chat.id, msg)
    elif text:
        isRunning = True
        if db.link_exists(text, 2):
            bot.send_message(message.chat.id, "–¢–∞–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å, —Ç–µ–∫—É—â–∞—è –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é")
        # db.add_subscriber(message.from_user.id, False)
        # db.close()
        bot.send_message(message.chat.id, '–≠—Ç–æ –∑–∞–º–µ—Ç–∫–∞?', reply_markup=noteKeyboard)


    else:
        bot.send_message(message.chat.id, "–≠–º–º, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –∏ —Å–∫–∞–∑–∞—Ç—å")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    db = SQLite('data.db')
    # db = sqlite3.connect("data.db")
    # sql = db.cursor()
    user_id = call.from_user.id
    global isRunning, TYPE1, TYPE2, name, subcategoryRun, changeRun, Note, text, L_allRun, N_allRun
    try:
        if call.message:
            if call.data == 'Yes':
                TYPE1 = "Note"
                isRunning = True

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–ó–∞–º–µ—Ç–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π...', reply_markup=noteCategoryKeyboard)
            elif call.data == 'No':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–ù–µ –∑–∞–º–µ—Ç–∫–∞', reply_markup=None)
                bot.send_message(chat_id=call.message.chat.id,
                                 text="–≠–º–º, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –∏ —Å–∫–∞–∑–∞—Ç—å, –≤–∏–¥–∏–º–æ, —è –Ω–µ –∑–Ω–∞–∫–æ–º —Å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
                isRunning = False

            if TYPE1 == "Link":
                if TYPE2 in keyboard.TYPE2List:
                    name = keyboard.changeType2Dict.get(TYPE2)
                    if call.data == 'OK':
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text='–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ ' + name, reply_markup=None)
                        isRunning = False

                        db.add_data(text, user_id, 1, keyboard.associativeDict.get(TYPE2),
                                    keyboard.unsortedDict.get(TYPE2))
                        # TYPE Link = 1, Note = 2. –°–¥–µ–ª–∞–Ω–æ –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –ë–î
                    # sql.execute("INSERT INTO data_table VALUES(?,?,?,?,?)",
                    #             (text, call.from_user.id, 1, 7, "Unsorted"))
                    # db.commit()

                    # add_data("sdsddsd",call.from_user.id, 1, 7, "Unsorted")
                    # –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π–≤ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
                    elif call.data == 'Change':
                        changeRun = True
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text="–ú–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é " + name + " –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...",
                                              reply_markup=ChangeTYPE2Keyboard)


                    # call.data —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏–±–æ –∫–æ–≥–¥–∞ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è (edit or send message),
                    # –æ–Ω–∏ –ø–æ —Å—É—Ç–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã–º–∏, –∏ –∏—Å—á–µ–∑–∞—é—Ç

                  #  if call.data in keyboard.changeType2Dict.keys():
                     #   changeRun = True
                    if changeRun == True:
                        if call.data in keyboard.changeType2Dict.keys():  # –µ—Å–ª–∏ call_data –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –∫–ª—é—á–∞—Ö
                            changeRun = False
                            temp_call_data = call.data  # —Å–ª–æ–≤–∞—Ä—è —Ç–æ
                            temp_item = keyboard.changeType2Dict.get(temp_call_data)
                            TYPE2 = temp_call_data
                            if TYPE2 in keyboard.mainTYPE2List:
                                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + temp_item,
                                                      reply_markup=rightKeyboard)
                            else:
                                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + temp_item,
                                                      reply_markup=rightKeyboard_without_subcategory)

                    if call.data == 'subcategory':
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text="–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ " + name + " —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π...",
                                              reply_markup=keyboard.changeKeyboardsDict.get(TYPE2))
                        subcategoryRun = True

                    # –°–æ–∑–¥–∞–ª —Å–ª–æ–≤–∞—Ä–∏ —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –º–Ω–æ–≥–æ –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ–≥–æ –∫–æ–¥–∞
                    # call_data –≠—Ç–æ —Ç–æ, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –º—ã –Ω–∞–∂–∏–∞–µ–º, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è

                    if subcategoryRun:
                        # –ø–µ—Ä–≤—ã–π if –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
                        # –≤—Ç–æ—Ä–æ–π, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–∞
                        needed_dict = keyboard.dictionaryDict.get(TYPE2)  # –Ω—É–∂–Ω—ã–π –Ω–∞–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Ö–æ–¥–∏–º –æ—Ç –∏–º–µ–Ω–∏ TYPE2
                        # –Ω–∞–ø—Ä–∏–º–µ—Ä videoDict                                                                  #Video
                        if call.data in needed_dict.keys():
                            temp_call_data = call.data
                            temp_item = needed_dict.get(temp_call_data)
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                  text="–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ " + name + " c –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π " +
                                                       temp_item, reply_markup=None)
                            db.add_data(text, user_id, 1, keyboard.associativeDict.get(TYPE2),
                                        temp_call_data)
                            # save user_id_TEXT_TYPE1_TYPE2_temp_call_data_Description?
                            subcategoryRun = False
                            isRunning = False

            if TYPE1 == "Note":
                if call.data in keyboard.noteDict.keys():
                    temp_call_data = call.data
                    temp_item = keyboard.noteDict.get(temp_call_data)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–î–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é " + temp_item, reply_markup=None)
                    db.add_data(text, user_id, 2, keyboard.noteAssociativeDict.get(temp_call_data),
                                "Note")
                    # save user_id_TEXT_TYPE1_TYPE2_temp_call_data_   Description?
                    isRunning = False
            if call.data == "L_Look_all":
                result = db.get_data(1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üåê–°—Å—ã–ª–∫–∏", reply_markup=None)
                bot.send_message(chat_id=call.message.chat.id,
                                 text="–°–ø–∏—Å–æ–∫")
                i = 1
                for tuple_ in result:
                    t_text, t_user_id, t_type1, t_type2, t_subcategory = tuple_
                    if not t_type2 == 8 and not t_type2 == 9:
                        needed__dict = keyboard.mirroredAssociativeDict.get(
                            str(t_type2))  # –í –∫–æ—Ä—Ç–µ–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è int –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º
                        # videoDict                                         # 1=Video
                        number = str(i)
                        category = keyboard.mirroredRAssociativeDict.get(str(t_type2))
                        t_subcategory_done = needed__dict.get(t_subcategory)
                        texxxt = str(t_text)
                        bot.send_message(chat_id=call.message.chat.id,
                                         text=f"{number}. <a href='{t_text}'>{t_text}</a>\n"
                                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {t_subcategory_done}",
                                         parse_mode='html')
                        i = i + 1
                    else:
                        bot.send_message(chat_id=call.message.chat.id,
                                         text=f"{number}. <a href='{t_text}'>{t_text}</a>\n"
                                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                                         parse_mode='html')
                        i = i + 1
            elif call.data == "L_Look_Category":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üåê–í—ã–±—Ä–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...", reply_markup=keyboard.ChangeTYPE2Keyboard)
                L_allRun = True

           # if call.data in keyboard.changeType2Dict.keys():
           #     L_allRun = True

            if L_allRun and call.data in keyboard.changeType2Dict.keys():
                if L_allRun:
                    temp_call_data = call.data
                    number = keyboard.associativeDictnum.get(temp_call_data)
                    L_allRun = False
                    result = db.get_data1(1, number)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="üåê–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=None)
                    bot.send_message(chat_id=call.message.chat.id,
                                     text="–°–ø–∏—Å–æ–∫")
                    i = 1
                    for tuple_ in result:
                        t_text, t_user_id, t_type1, t_type2, t_subcategory = tuple_
                        if not t_type2 == 8 and not t_type2 == 9:
                            needed__dict = keyboard.mirroredAssociativeDict.get(
                                str(t_type2))  # –í –∫–æ—Ä—Ç–µ–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è int –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º
                            # videoDict                                         # 1=Video
                            number = str(i)
                            category = keyboard.mirroredRAssociativeDict.get(str(t_type2))
                            t_subcategory_done = needed__dict.get(t_subcategory)
                            texxxt = str(t_text)
                            bot.send_message(chat_id=call.message.chat.id,
                                             text=f"{number}. <a href='{t_text}'>{t_text}</a>\n"
                                                  f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {t_subcategory_done}",
                                             parse_mode='html')
                            i = i + 1

                        else:
                            bot.send_message(chat_id=call.message.chat.id,
                                             text=f"{number}. <a href='{t_text}'>{t_text}</a>\n"
                                                  f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                                             parse_mode='html')
                            i = i + 1

            # if call.data == "L_Redact":
            #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
            #     result = db.get_data(1)
            #     bot.send_message(chat_id=call.message.chat.id,
            #                      text="result")
            #     i = 1
            #     number = str(i)
            #     for tuple_ in result:
            #         markup.add(number)
            #
            #         i = i + 1
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #                       text="–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=markup)
            #
            # if call.data == "L_Delete":
            #     pass

            if call.data == "N_Look_all":
                result = db.get_data(2)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üìù–ó–∞–º–µ—Ç–∫–∏", reply_markup=None)
                bot.send_message(chat_id=call.message.chat.id,
                                 text="–°–ø–∏—Å–æ–∫")
                i = 1
                for tuple_ in result:
                    t_text, t_user_id, t_type1, t_type2, t_subcategory = tuple_
                    number = str(i)
                    category = keyboard.mirroredNoteAssociativeDict.get(str(t_type2))
                    bot.send_message(chat_id=call.message.chat.id,
                                     text=f"{number}. –ó–∞–º–µ—Ç–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                                          f"{t_text}\n",
                                     parse_mode='html')
                    i = i + 1

            elif call.data == "N_Look_Category":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üìù–í—ã–±—Ä–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...", reply_markup=keyboard.noteCategory1Keyboard)
                N_allRun = True

            #if call.data in keyboard.noteAssociativeDict1.keys():


            if N_allRun and call.data in keyboard.noteAssociativeDict1.keys():
                if N_allRun:
                    temp_call_data = call.data
                    number = int(keyboard.noteAssociativeDict1.get(temp_call_data))
                    N_allRun = False
                    result = db.get_data1(2, number)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="üìù–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=None)
                    bot.send_message(chat_id=call.message.chat.id,
                                     text="–°–ø–∏—Å–æ–∫:")
                    i = 1
                    for tuple_ in result:
                        t_text, t_user_id, t_type1, t_type2, t_subcategory = tuple_
                       # needed__dict = keyboard.mirroredAssociativeDict.get(
                      #      str(t_type2))  # –í –∫–æ—Ä—Ç–µ–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è int –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º
                        # videoDict                                         # 1=Video
                        number = str(i)
                        category = keyboard.mirroredNoteAssociativeDict.get(str(t_type2))
                        #t_subcategory_done = needed__dict.get(t_subcategory)
                        texxxt = str(t_text)
                        bot.send_message(chat_id=call.message.chat.id,
                                         text=f"{number}. –ó–∞–º–µ—Ç–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                                              f"{t_text}\n",
                                         parse_mode='html')
                        i = i + 1

            # if call.data == "N_Redact":
            #    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
            #     result = db.get_data(1)
            #     bot.send_message(chat_id=call.message.chat.id,
            #                      text="result")
            #     i = 1
            #     number = str(i)
            #     for tuple_ in result:
            #        # markup.add(number)
            #
            #         i = i + 1
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #                       text="–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=markup)
            #
            # if call.data == "N_Delete":
            #     pass

        # if call.data == "L_Look_Category":

        # show alert
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                  text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")
    except Exception as e:
        print(repr(e))
    db.close()


def ToDo(message):
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–ª—Å—è')


bot.polling(none_stop=True)
